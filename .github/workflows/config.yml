name: Config heavy

on: [push]
  # schedule: [cron: '0 16 * * *']

jobs:
  repo-check:
    name: Repository commit check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: commit-check
        run: 'echo ::set-output name=has-commits::$(./scripts/has-commits-since.sh "24 hours ago")'
    outputs:
      has-commits: ${{ steps.commit-check.outputs.has-commits }}

  config_all:
    name: ${{ matrix.system.name }} ${{ matrix.conf.configure_flags }} ${{ matrix.conf.without_packages }}
    runs-on: ${{ matrix.system.os }}
    needs: repo-check
    if: needs.repo-check.outputs.has-commits == 'true'
    strategy:
      max-parallel: 8
      matrix:
        system:
          - name: Windows
            os: windows-latest
          - name: macOS
            os: macos-latest
          - name: Linux
            os: ubuntu-20.04
        conf:
          # - configure_flags:  -Denable_debugger=normal
          # - configure_flags:  -Denable_debugger=heavy
          # - configure_flags:  --enable-png-static
          # - configure_flags:  --enable-sdl-static
          # - configure_flags:  --enable-png-static --enable-sdl-static
          - configure_flags:  -Duse_opengl=false
          # - configure_flags:  -Duse_fluidsynth=false
          # - configure_flags:  -Duse_opusfile=false
          # - configure_flags:  -Duse_png=false
          # - configure_flags:  -Ddynamic_core=dyn-x86
          # - configure_flags:  -Ddynamic_core=dynrec
          # - configure_flags:  -Ddynamic_core=none

    env:
      CHERE_INVOKING: yes
    steps:
      - uses:  actions/checkout@v2
      - name:  Check repo for commits
        id:    repo-meta
        shell: bash
        run:   'echo ::set-output name=has-commits::$(./scripts/has-commits-since.sh "24 hours ago")'

      - name:  Get Date
        id:    get-date
        if:    matrix.system.name == 'Windows'
        shell: bash
        run:   echo ::set-output name=date::$(date +%Y-%W)

      - uses:  actions/cache@v2
        id:    cache-msys2
        if:    matrix.system.name == 'Windows'
        with:
          path: 'C:/tools/msys64'
          key: msys2-64-${{ steps.get-date.outputs.date }}-4

      - name:  Install MSYS2 (Windows)
        if:    >
          matrix.system.name == 'Windows' &&
          steps.cache-msys2.outputs.cache-hit != 'true'
        run:   choco install msys2 --no-progress

      - name:  Install dependencies ${{ matrix.conf.without_packages }} (Windows)
        if:    >
          matrix.system.name == 'Windows' &&
          steps.cache-msys2.outputs.cache-hit != 'true'
        shell: python scripts\msys-bash.py {0}
        run: |
           cat .github/packages/windows-msys2.txt | xargs pacman -S --noconfirm
           .github/scripts/shrink-msys2.sh

      - name:  Install dependencies (Linux)
        if:    matrix.system.name == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get install $(cat ./.github/packages/ubuntu-20.04-apt.txt)

      - name:  Install dependencies (macOS)
        if:    matrix.system.name == 'macOS'
        run: |
          brew install meson $(cat ./.github/packages/macos-brew.txt)

      - name:  Build ${{ matrix.conf.configure_flags }} (Windows)
        if:    matrix.system.name == 'Windows'
        shell: python scripts\msys-bash.py {0}
        run: |
          # scripts/build.sh -c ${{ matrix.system.compiler }} -t debug --bin-path /mingw64/bin
          # ${{ matrix.conf.configure_flags }} ${{ matrix.system.missing_packages }}
          meson setup \
            --wrap-mode=nofallback ${{ matrix.conf.configure_flags }} \
            build
          cd build
          ninja

      - name:  Build ${{ matrix.conf.configure_flags }} (macOS)
        if:    matrix.system.name == 'macOS'
        run: |
          meson setup \
            --wrap-mode=nofallback ${{ matrix.conf.configure_flags }} \
            build
          cd build
          ninja

      - name:  Build ${{ matrix.conf.configure_flags }} (Linux)
        if:    matrix.system.name == 'Linux'
        run: |
          meson setup \
            --wrap-mode=nofallback ${{ matrix.conf.configure_flags }} \
            build
          cd build
          ninja
